{
    "variables": {
        "admin_username": "admin",
        "admin_password": "admin",

        "cookbook_name": "not_really_a_cookbook_name",

        "dir_cookbooks_src": "src/cookbooks",
        "dir_cookbooks_vendors": "packages/vendor/cookbooks",
        "dir_deploy": null,
        "dir_log": null,
        "dir_src_provisioning": "src/provisioning",
        "dir_scripts_user": null,
        "dir_temp": null,
        "dir_vm_import": null,

        "vm_import_directory": null,
        "vm_name": "not_really_a_vm_name",
        "vm_ram_size_in_mb": "2048",
        "vm_switch_name": "this_switch_does_not_exist",
        "vm_switch_vlan": ""
    },
    "builders": [
        {
            "boot_command": [],
            "boot_wait": "5s",
            "clone_from_vmcx_path": "{{ user `dir_vm_import` }}",
            "communicator": "winrm",
            "enable_dynamic_memory": false,
            "enable_mac_spoofing": false,
            "enable_secure_boot": false,
            "enable_virtualization_extensions": false,
            "generation": 1,
            "guest_additions_mode": "disable",
            "headless": true,
            "http_port_min": 8150,
            "http_port_max": 8160,
            "output_directory": "{{ user `dir_temp` }}/{{ user `vm_name` }}",
            "ram_size": "{{ user `vm_ram_size_in_mb` }}",
            "secondary_iso_images": [
                "{{ user `dir_deploy` }}/unattend.iso"
            ],
            "shutdown_command": "CALL f:\\run-sysprep.cmd & IF \"%ERRORLEVEL%\" == \"0\" (ECHO \"Shutdown script succeeded with exit code = %ERRORLEVEL%\" &EXIT 0) ELSE (ECHO \"Shutdown script failed with exit code = %ERRORLEVEL%\" &EXIT %ERRORLEVEL%)",
            "shutdown_timeout": "20m",
            "skip_compaction": false,
            "switch_name": "{{ user `vm_switch_name` }}",
            "switch_vlan_id": "{{ user `vm_switch_vlan` }}",
            "type": "hyperv-vmcx",
            "vlan_id": "{{ user `vm_switch_vlan` }}",
            "vm_name": "{{ user `vm_name` }}",
            "winrm_password": "{{ user `admin_password` }}",
            "winrm_timeout": "2h",
            "winrm_username": "{{ user `admin_username` }}"
        }
    ],
    "provisioners": [
        {
            "command": "Set-VM -Name {{ user `vm_name` }} -AutomaticCheckpointsEnabled $false",
            "execute_command": ["Powershell.exe", "-NonInteractive", "-NoLogo", "-NoProfile", "-Command", "{{.Command}}"],
            "type": "shell-local"
        },
        {
            "command": "Get-VMSnapshot -VMName {{ user `vm_name` }} | Remove-VMSnapshot",
            "execute_command": ["Powershell.exe", "-NonInteractive", "-NoLogo", "-NoProfile", "-Command", "{{.Command}}"],
            "type": "shell-local"
        },

        {
            "inline": "Get-PSDrive",
            "type": "powershell"
        },

        {
            "inline": [
                "$ErrorActionPreference = 'Stop'; Get-WmiObject -Class Win32_volume -Filter 'DriveType=5' | Select-Object -First 1 | Set-WmiInstance -Arguments @{DriveLetter='f:'}"
            ],
            "type": "powershell"
        },
        {
            "inline": "$ErrorActionPreference = 'Stop'; New-Item -Path c:/temp_dvd -ItemType Directory; $drive = 'd:'; if (Test-Path 'e:/client.rb') { $drive = 'e:'} else { if (Test-Path 'f:/client.rb') { $drive = 'f:'} }; Copy-Item \"$($drive)/*\" c:/temp_dvd -Recurse -Verbose",
            "type": "powershell"
        },

        {
            "destination": "c:/config/unbound/unbound_zones.conf",
            "source": "{{ user `dir_src_provisioning` }}/unbound_zones.conf",
            "type": "file"
        },

        {
            "restart_timeout": "20m",
            "type": "windows-restart"
        },

        {
            "inline": "Get-PSDrive",
            "type": "powershell"
        },

        {
            "inline": [
                "$ErrorActionPreference = 'Stop'; Set-StorageSetting -NewDiskPolicy OnlineAll",
                "$ErrorActionPreference = 'Stop'; Get-StorageSetting"
            ],
            "type": "powershell"
        },

        {
            "env_var_format": "$env:%s=\"%s\"; ",
            "execute_command": ["powershell.exe", "{{.Vars}} {{.Script}}"],
            "inline": [
                "$ErrorActionPreference = 'Stop'; New-VHD -Path '{{ user `dir_temp` }}/{{ build_name }}/Virtual Hard Disks/workspace.vhdx' -SizeBytes 100GB",
                "$ErrorActionPreference = 'Stop'; Add-VmHardDiskDrive -VMName {{ user `vm_name` }} -ControllerType SCSI -ControllerNumber 0 -Path '{{ user `dir_temp` }}/{{build_name}}/Virtual Hard Disks/workspace.vhdx'"
            ],
            "tempfile_extension": ".ps1",
            "type": "shell-local"
        },
        {
            "inline": [
                "$ErrorActionPreference = 'Stop'; $disk = Get-Disk | Where-Object partitionstyle -eq 'raw'; $disk | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel 'workspace' -Confirm:$false; $disk | Set-Disk -IsOffline $false",
                "$ErrorActionPreference = 'Stop'; Get-Disk"
            ],
            "type": "powershell"
        },

        {
            "env_var_format": "$env:%s=\"%s\"; ",
            "execute_command": ["powershell.exe", "{{.Vars}} {{.Script}}"],
            "inline": [
                "$ErrorActionPreference = 'Stop'; New-VHD -Path '{{ user `dir_temp` }}/{{ build_name }}/Virtual Hard Disks/cache.vhdx' -SizeBytes 50GB -BlockSizeBytes 1MB",
                "$ErrorActionPreference = 'Stop'; Add-VmHardDiskDrive -VMName {{ user `vm_name` }} -ControllerType SCSI -ControllerNumber 0 -Path '{{ user `dir_temp` }}/{{build_name}}/Virtual Hard Disks/cache.vhdx'"
            ],
            "tempfile_extension": ".ps1",
            "type": "shell-local"
        },
        {
            "inline": [
                "$ErrorActionPreference = 'Stop'; $disk = Get-Disk | Where-Object partitionstyle -eq 'raw'; $disk | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel 'cache' -Confirm:$false; $disk | Set-Disk -IsOffline $false",
                "$ErrorActionPreference = 'Stop'; Get-Disk"
            ],
            "type": "powershell"
        },

        {
            "restart_timeout": "20m",
            "type": "windows-restart"
        },

        {
            "inline": "Get-PSDrive",
            "type": "powershell"
        },

        {
            "elevated_password": "{{ user `admin_password` }}",
            "elevated_user": "{{ user `admin_username` }}",
            "inline": "Start-Process 'msiexec' -ArgumentList '/qb /i c:\\temp_dvd\\chef.msi' -NoNewWindow -Wait",
            "type": "powershell"
        },
        {
            "elevated_password": "{{ user `admin_password` }}",
            "elevated_user": "{{ user `admin_username` }}",
            "inline": "& c:\\temp_dvd\\chefservice.exe -install ",
            "type": "powershell"
        },
        {
            "elevated_password": "{{ user `admin_password` }}",
            "elevated_user": "{{ user `admin_username` }}",
            "inline": "& c:\\temp_dvd\\eis-chef.exe --local-mode --config c:\\temp_dvd\\client.rb --override-runlist \"{{ user `cookbook_name` }}::default\" --log-level info --chef-license accept-no-persist",
            "type": "powershell"
        },
        {
            "elevated_password": "{{ user `admin_password` }}",
            "elevated_user": "{{ user `admin_username` }}",
            "inline": "& c:\\temp_dvd\\chefservice.exe -uninstall ",
            "type": "powershell"
        },
        {
            "elevated_password": "{{ user `admin_password` }}",
            "elevated_user": "{{ user `admin_username` }}",
            "inline": "Start-Process 'msiexec' -ArgumentList '/qb /x C:\\temp_dvd\\chef.msi' -NoNewWindow -Wait",
            "type": "powershell"
        },

        {
            "restart_timeout": "20m",
            "type": "windows-restart"
        },

        {
            "env_var_format": "$env:%s=\"%s\"; ",
            "execute_command" : ["powershell.exe", "{{.Vars}} {{.Script}}"],
            "inline": ["{{ user `dir_scripts_user` }}/Copy-LogFilesFromVm.ps1 -vmName {{ user `vm_name` }} -userName {{ user `admin_username` }} -userPassword {{ user `admin_password` }} -targetDirectory {{ user `dir_log` }}/packer.beforesysprep"],
            "tempfile_extension": ".ps1",
            "type": "shell-local"
        },

        {
            "elevated_password": "{{ user `admin_password` }}",
            "elevated_user": "{{ user `admin_username` }}",
            "inline": "Remove-Item -Path c:/temp_dvd -Recurse -Force",
            "type": "powershell"
        },
        {
            "env_var_format": "$env:%s=\"%s\"; ",
            "execute_command" : ["powershell.exe", "{{.Vars}} {{.Script}}"],
            "inline": ["{{ user `dir_scripts_user` }}/Copy-LogFilesFromVm.ps1 -vmName {{ user `vm_name` }} -userName {{ user `admin_username` }} -userPassword {{ user `admin_password` }} -targetDirectory {{ user `dir_log` }}/packer.beforesysprep"],
            "tempfile_extension": ".ps1",
            "type": "shell-local"
        },
        {
            "elevated_password": "{{user `admin_password`}}",
            "elevated_user": "{{user `admin_username`}}",
            "scripts": [
                "{{ user `dir_scripts_user` }}/PrepareFor-DiskOptimization.ps1",
                "{{ user `dir_scripts_user` }}/Invoke-Defrag.ps1",
                "{{ user `dir_scripts_user` }}/Invoke-DiskOptimization.ps1",
                "{{ user `dir_scripts_user` }}/Invoke-SDelete.ps1"
            ],
            "type": "powershell"
        }
    ]
}
